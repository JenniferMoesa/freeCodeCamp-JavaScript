COMMENT YOUR JAVASCRIPT CODE

// This is an in-line comment.

/* This is a
multi-line comment */

-------------------------------------------------------------------------------------------------------------------

DECLARE JAVASCRIPT VARIABLES
We tell JavaScript to create or declare a variable by putting the keyword var in front of it, like so:

var ourName;
creates a variable called ourName. In JavaScript we end statements with semicolons.
Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.

---------------------------------------------------------------------------------------------------------------------

STORING VALUES WITH THE ASSIGNMENT OPERATORPASSED
In JavaScript, you can store a value in a variable with the assignment operator (=).

myVariable = 5;
This assigns the Number value 5 to myVariable.

If there are any calculations to the right of the = operator,
those are performed before the value is assigned to the variable on the left of the operator.

var myVar;
myVar = 5;
First, this code creates a variable named myVar. Then, the code assigns 5 to myVar. 
Now, if myVar appears again in the code, the program will treat it as if it is 5.

----------------------------------------------------------------------------------------------------------------------

ASSIGNING THE VALUE OF ONE VARIABLE TO ANOTHER
After a value is assigned to a variable using the assignment operator,
you can assign the value of that variable to another variable using the assignment operator.

var myVar; //declares a myVar variable with no value
myVar = 5; //assigns the variable myVar with the value 5
var myNum; //a variable named myNum is declared with no value
myNum = myVar; //the contents of myVar (which is 5) is assigned to the variable myNum. Now, myNum also has the value of 5.

--------------------------------------------------------------------------------------------------------------------------

INITIALIZING VARIABLES WITH THE ASSIGNMENT OPERATOR
It is common to initialize a variable to an initial value in the same line as it is declared.

var myVar = 0;
Creates a new variable called myVar and assigns it an initial value of 0.

---------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING UNINITIALIZED VARIBLES

When JavaScript variables are declared, they have an initial value of undefined.
If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
If you concatenate a string with an undefined variable, you will get a literal string of undefined.

Initialize the three variables a, b, and c with 5, 10, and "I am a" respectively so that they will not be undefined.

var a = 5;
var b = 10;
var c = "I am a";
// Only change code above this line

a = a + 1; //6
b = b + 5; //15
c = c + " String!"; //I am a String!

----------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING CASE SENSITIVITY IN VARIABLES

In JavaScript all variables and function names are case sensitive. This means that capitalization matters.

MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing.
It is strongly recommended that for the sake of clarity, you do not use this language feature.

Best Practice

Write variable names in JavaScript in camelCase.
In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

Examples:

var someVariable;
var anotherVariableName;
var thisVariableNameIsSoLong;

------------------------------------------------------------------------------------------------------------------------------

ADD TWO NUMBERS WITH JAVASCRIPT

Number is a data type in JavaScript which represents numeric data.

Now let's try to add two numbers using JavaScript.

JavaScript uses the + symbol as an addition operator when placed between two numbers.

Example:

myVar = 5 + 10;
myVar now has the value 15.

var sum = 10 + 10; // sum equals 20

-------------------------------------------------------------------------------------------------------------------------------

SUBSTRACT ONE NUMBER FROM ANOTHER WITH JAVASCRIPT

We can also subtract one number from another.

JavaScript uses the - symbol for subtraction.

Example

myVar = 12 - 6;
myVar would have the value 6.


var difference = 45 - 33; // the difference is 12.

----------------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO NUMBERS WITH JAVASCRIPT

We can also multiply one number by another.

JavaScript uses the * symbol for multiplication of two numbers.

Example

myVar = 13 * 13;
myVar would have the value 169.

var product = 8 * 10; // product equals 80.

-----------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE NUMBER BY ANOTHER WITH JAVASCRIPT

We can also divide one number by another.

JavaScript uses the / symbol for division.

Example

myVar = 16 / 2; // myVar now has the value 8.

var quotient = 66 / 33; // quotient is equal to 2.


----------------------------------------------------------------------------------------------------------------------------------

INCREMENT (VERHOGEN) A NUMBER WITH JAVASCRIPT

You can easily increment or add one to a variable with the ++ operator.

i++;
is the equivalent of

i = i + 1;
Note: The entire line becomes i++;, eliminating the need for the equal sign.

var myVar = 87;
myVar ++; // myVar = myVar + 1;


---------------------------------------------------------------------------------------------------------------------------------

DECREMENT (VERMINDEREN) A NUMBER WITH JAVASCRIPT

You can easily decrement or decrease a variable by one with the -- operator.

i--;
is the equivalent of

i = i - 1;
Note: The entire line becomes i--;, eliminating the need for the equal sign.

var myVar = 11;
myVar --; // myVar = myVar - 1;


------------------------------------------------------------------------------------------------------------------------------

CREATE DECIMAL NUMBERS WITH JAVASCRIPT

We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.

Note: Not all real numbers can accurately be represented in floating point. This can lead to rounding errors

var myDecimal = 5.7;

-----------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO DECIMALS WITH JAVASCRIPT

In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.

Let's multiply two decimals together to get their product.

var product = 2.0 * 2.5; // product equals 5

------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE DECIMAL BY ANOTHER WITH JAVASCRIPT

Now let's divide one decimal by another.

var quotient = 4.4 / 2.0; // quotient equals to 2.2.

-------------------------------------------------------------------------------------------------------------------------------

FINDING A REMAINDER IN JAVASCRIPT

The remainder operator % gives the remainder of the division of two numbers.

Example

5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)

Usage
In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.

17 % 2 = 1 (17 is Odd)
48 % 2 = 0 (48 is Even)
Note: The remainder operator is sometimes incorrectly referred to as the modulus operator.
It is very similar to modulus, but does not work properly with negative numbers.

Example:
var remainder = 11 % 3;

----------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED ADDITION

In programming, it is common to use assignments to modify the contents of a variable.
Remember that everything to the right of the equals sign is evaluated first, so we can say:

myVar = myVar + 5; // add 5 to myVar.
Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.

One such operator is the += operator.

var myVar = 1;
myVar += 5;
console.log(myVar);
6 would be displayed in the console.

var a = 3;
var b = 17;
var c = 12;

// Only change code below this line
a += 12;
b += 9;
c += 7;

--------------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED SUBTRACTION  

Like the += operator, -= subtracts a number from a variable.

myVar = myVar - 5;
will subtract 5 from myVar. This can be rewritten as: myVar -= 5;

var a = 11;
var b = 9;
var c = 3;

// Only change code below this line
a -= 6;
b -= 15;
c -= 1;

----------------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED MULTIPLICATION

The *= operator multiplies a variable by a number.

myVar = myVar * 5;
will multiply myVar by 5. This can be rewritten as:

myVar *= 5;

var a = 5;
var b = 12;
var c = 4.6;

// Only change code below this line
a *= 5;
b *= 3;
c *= 10;

---------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED DIVISION

The /= operator divides a variable by another number.

myVar = myVar / 5;
Will divide myVar by 5. This can be rewritten as:

myVar /= 5;

var a = 48;
var b = 108;
var c = 33;

// Only change code below this line
a /= 12; // a = a /12;
b /= 4; // b = b / 4;
c /= 11; // c = c / 11;
---
---------------------------------------------------------------------------------------------------------------------------------------

DECLARE STRING VARIABLES

Previously we have used the code

var myName = "your name";
"your name" is called a string literal. It is a string because it is a series of zero or more characters enclosed in single or double quotes.

excercise:
Create two new string variables: myFirstName and myLastName and assign them the values of your first and last name, respectively.
var myFirstName = "Jennifer";
var myLastName = "Moesa";

----------------------------------------------------------------------------------------------------------------------------------------

ESCAPING LITERAL QUOTES IN STRINGS

When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: " or ' inside of your string?

In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

var sampleStr = "Alan said, \"Peter is learning JavaScript\".";

This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string.
So if you were to print this to the console, you would get:

Alan said, "Peter is learning JavaScript".

excercise:
Use backslashes to assign a string to the myStr variable so that if you were to print it to the console, you would see:

I am a "double quoted" string inside "double quotes".

var myStr = "I am a \"double quoted\" string inside \"double quotes\"."; // Change this line


-------------------------------------------------------------------------------------------------------------------------------------------

QUOTING STRINGS WITH SINGLE QUOTES

String values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote.
Unlike some other programming languages, single and double quotes work the same in JavaScript.

doubleQuoteStr = "This is a string"; 
singleQuoteStr = 'This is also a string';

The reason why you might want to use one type of quote over the other is if you want to use both in a string.
This might happen if you want to save a conversation in a string and have the conversation in quotes.
Another use for it would be saving an <a> tag with various attributes in quotes, all within a string.

conversation = 'Finn exclaims to Jake, "Algebraic!"';

However, this becomes a problem if you need to use the outermost quotes within it.
Remember, a string has the same kind of quote at the beginning and end.
But if you have that same quote somewhere in the middle, the string will stop early and throw an error.

goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"'; 
badStr = 'Finn responds, "Let's go!"';

Here badStr will throw an error.

In the goodStr above, you can use both quotes safely by using the backslash \ as an escape character.

Note: The backslash \ should not be confused with the forward slash /. They do not do the same thing.

excercise:

var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

---------------------------------------------------------------------------------------------------------------------------------------------------

ESCAPE SEQUENCES IN STRINGS

Quotes are not the only characters that can be escaped inside a string. There are two reasons to use escaping characters:

To allow you to use characters you may not otherwise be able to type out, such as a carriage return.
To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.

We learned this in the previous challenge.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed
Note that the backslash itself must be escaped in order to display as a backslash.

Assign the following three lines of text into the single variable myStr using escape sequences.

FirstLine
    \SecondLine
ThirdLine
You will need to use escape sequences to insert special characters correctly.
You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.

Note: The indentation for SecondLine is achieved with the tab escape character, not spaces.

var myStr = "FirstLine\n\t\\SecondLine\nThirdLine"
------------------------------------------------------------------------------------------------------------------------------------------------------

CONCATENATING STRINGS WITH PLUS OPERATOR

In JavaScript, when the + operator is used with a String value, it is called the concatenation operator.
You can build a new string out of other strings by concatenating them together.

Example

'My name is Alan,' + ' I concatenate.'
Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example:

var ourStr = "I come first. " + "I come second.";
The string I come first. I come second. would be displayed in the console.

excercise:
Build myStr from the strings This is the start. and This is the end. using the + operator. Be sure to include a space between the two strings.

var myStr = "This is the start. " + "This is the end."; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

CONCATENATING STRINGS WITH THE PLUS EQUALS OPERATOR

We can also use the += operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.

Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example:

var ourStr = "I come first. ";
ourStr += "I come second.";
ourStr now has a value of the string I come first. I come second..

excercise:
Build myStr over several lines by concatenating these two strings: This is the first sentence. and This is the second sentence. using the += operator.
Use the += operator similar to how it is shown in the example and be sure to include a space between the two strings.
Start by assigning the first string to myStr, then add on the second string.

// Only change code below this line

var myStr = "This is the first sentence. ";
myStr += "This is the second sentence.";

-------------------------------------------------------------------------------------------------------------------------------------------------------

CONSTRUCTING STRINGS WITH VARIABLES

Sometimes you will need to build a string, Mad Libs style. By using the concatenation operator (+), you can insert one or more variables into a string you're building.

Example:

var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";
ourStr would have a value of the string Hello, our name is freeCodeCamp, how are you?.

excercise:
Set myName to a string equal to your name and build myStr with myName between the strings My name is and and I am well!

// Only change code below this line
var myName = "Jennifer";
var myStr = "My name is " + myName + "and I am well!";

------------------------------------------------------------------------------------------------------------------------------------------------------------

APPENDING VARIABLES TO STRINGS

Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.

Example:

var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;
ourStr would have the value freeCodeCamp is awesome!.

excercise:
Set someAdjective to a string of at least 3 characters and append it to myStr using the += operator.

// Change code below this line

var someAdjective = "amazing!";
var myStr = "Learning to code is ";
myStr += someAdjective;

---------------------------------------------------------------------------------------------------------------------------------------------------------

FIND THE LENGTH OF A STRING

You can find the length of a String value by writing .length after the string variable or string literal.

console.log("Alan Peter".length);
The value 10 would be displayed in the console.

For example, if we created a variable var firstName = "Ada", we could find out how long the string Ada is by using the firstName.length property.

excercise:
Use the .length property to count the number of characters in the lastName variable and assign it to lastNameLength.


// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

// Only change code below this line

lastNameLength = lastName.length;

------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE FIRST CHARACTER IN A STRING

Bracket notation is a way to get a character at a specific index within a string.

Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as Zero-based indexing.

For example, the character at index 0 in the word Charles is C. So if var firstName = "Charles", you can get the value of the first letter of the string by using firstName[0].

Example:

var firstName = "Charles";
var firstLetter = firstName[0];
firstLetter would have a value of the string C.

excercise:
Use bracket notation to find the first character in the lastName variable and assign it to firstLetterOfLastName.

Hint: Try looking at the example above if you get stuck.

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// Only change code below this line
firstLetterOfLastName = lastName[0]; // Change this line

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

UNDERSTAND STRING IMMUTABILITY

In JavaScript, String values are immutable, which means that they cannot be altered once created.

For example, the following code:

var myStr = "Bob";
myStr[0] = "J";

cannot change the value of myStr to Job, because the contents of myStr cannot be altered.
Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed.
The only way to change myStr would be to assign it with a new string, like this:

var myStr = "Bob";
myStr = "Job";

excercise:
Correct the assignment to myStr so it contains the string value of Hello World using the approach shown in the example above.

// Setup
var myStr = "Jello World";

// Only change code below this line
myStr = "Hello World"; // Change this line
// Only change code above this line

------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE NTH CHARACTER IN A STRING

You can also use bracket notation to get the character at other positions within a string.

Remember that computers start counting at 0, so the first character is actually the zeroth character.

Example:

var firstName = "Ada";
var secondLetterOfFirstName = firstName[1];
secondLetterOfFirstName would have a value of the string d.

excercise:
Let's try to set thirdLetterOfLastName to equal the third letter of the lastName variable using bracket notation.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var thirdLetterOfLastName = lastName[2]; // Change this line

---------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE LAST CHARACTER IN A STRING

In order to get the last letter of a string, you can subtract one from the string's length.

For example, if var firstName = "Ada", you can get the value of the last letter of the string by using firstName[firstName.length - 1].

Example:

var firstName = "Ada";
var lastLetter = firstName[firstName.length - 1];
lastLetter would have a value of the string a.

excercise:
Use bracket notation to find the last character in the lastName variable.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var lastLetterOfLastName = lastName[lastName.length -1]; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE NTH-TO-LAST CHARACTER IN A STRING

You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.

For example, you can get the value of the third-to-last letter of the var firstName = "Augusta" string by using firstName[firstName.length - 3]

Example:

var firstName = "Augusta";
var thirdToLastLetter = firstName[firstName.length - 3];
thirdToLastLetter would have a value of the string s.

excercise:
Use bracket notation to find the second-to-last character in the lastName string.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var secondToLastLetterOfLastName = lastName[lastName.length - 2]; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

WORD BLANKS

We will now use our knowledge of strings to build a "Mad Libs" style word game we're calling "Word Blanks".
You will create an (optionally humorous) "Fill in the Blanks" style sentence.

In a "Mad Libs" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs.
You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.

Consider this sentence - It was really ____, and we ____ ourselves ____.
This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it.
We can then assign the completed sentence to a variable as follows:

var sentence = "It was really " + "hot" + ", and we " + "laughed" + " ourselves " + "silly" + ".";

excercise:
In this challenge, we provide you with a noun, a verb, an adjective and an adverb.
You need to form a complete sentence using words of your choice, along with the words we provide.

You will need to use the string concatenation operator + to build a new string, using the provided variables: myNoun, myAdjective, myVerb, and myAdverb.
You will then assign the formed string to the wordBlanks variable. You should not change the words assigned to the variables.

You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence.

var myNoun = "dog";
var myAdjective = "big";
var myVerb = "ran";
var myAdverb = "quickly";

// Only change code below this line
var wordBlanks = "The " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + "."; // Change this line
// Only change code above this line

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

STORE MULTIPLE VALUES IN ONE VARIABLE USING JAVASCRIPT ARRAYS

With JavaScript array variables, we can store several pieces of data in one place.

You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:

var sandwich = ["peanut butter", "jelly", "bread"]

excercise:
Modify the new array myArray so that it contains both a string and a number (in that order).

// Only change code below this line
var myArray = ["Jennifer" , 1];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

NEST ONE ARRAY WITHIN ANOTHER ARRAY

You can also nest arrays within other arrays, like below:

[["Bulls", 23], ["White Sox", 45]]
This is also called a multi-dimensional array.

excercise:
Create a nested array called myArray.

// Only change code below this line
var myArray = [["apples, 3"], ["pears", 3]];

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ACCES ARRAY DATA WITH INDEXES

We can access the data inside arrays using indexes.

Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array.
Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.


Example

var array = [50,60,70];
array[0];
var data = array[1];
array[0] is now 50, and data has the value 60.

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0].
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Create a variable called myData and set it to equal the first value of myArray using bracket notation.

var myArray = [50,60,70];

var myData = myArray[0];

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MODIFY ARRAY DATA WITH INDEXES

Unlike strings, the entries of arrays are mutable and can be changed freely.

Example

var ourArray = [50,40,30];
ourArray[0] = 15;
ourArray now has the value [15, 40, 30].

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0].
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Modify the data stored at index 0 of myArray to a value of 45.

// Setup
var myArray = [18,64,99];
myArray[0] = 45;
// Only change code below this line

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ACCES MULTI-DIMENSIONAL ARRAYS WITH INDEXES

One way to think of a multi-dimensional array, is as an array of arrays.
When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array,
and each additional pair of brackets refers to the next level of entries inside.

Example

var arr = [
  [1,2,3],
  [4,5,6],
  [7,8,9],
  [[10,11,12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];
arr[3] is [[10, 11, 12], 13, 14], arr[3][0] is [10, 11, 12], and arr[3][0][1] is 11.

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] is not allowed.
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Using bracket notation select an element from myArray such that myData is equal to 8.

---------------------------------------------------------------------------------------------------------------------------------------------------------------






















---------------------------------------------------------------------------------------------------------------------------------------

ASSIGNMENT WITH A RETURNED VALUE
Call the processArg function with an argument of 7 and assign its return value to the variable processed.

var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

processed = processArg(7);

//processed has a value of 2

----------------------------------------------------------------------------------------------------------------------------

STAND IN LINE

In Computer Science a queue is an abstract Data Structure where items are kept in order.
New items can be added at the back of the queue and old items are taken off from the front of the queue.

FIRST
function nextInLine(arr, item) {
  // Your code here
  arr.push(item);
  return item; 
}

var testArr = [1,2,3,4,5];

console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));

AFTER
function nextInLine(arr, item) {
  // Your code here
  arr.push(item);
  return arr.shift(); 
}

var testArr = [1,2,3,4,5];

console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));

----------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING BOOLEAN VALUES

Another data type is the Boolean. Booleans may only be one of two values: true or false.
They are basically little on-off switches, where true is on and false is off. These two states are mutually exclusive.

Note: Boolean values are never written with quotes. The strings "true" and "false" are not Boolean
and have no special meaning in JavaScript.

function welcomeToBooleans() {
  return true; 
}

-----------------------------------------------------------------------------------------------------------------------

USE CONDITIONAL LOGIC WITH IF STATEMENTS

If statements are used to make decisions in code.
The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses.
These conditions are known as Boolean conditions and they may only be true or false.

When the condition evaluates to true, the program executes the statement inside the curly braces.
When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.

Pseudocode

if (condition is true) {
  statement is executed
}

Example

function test (myCondition) {
  if (myCondition) {
     return "It was true";
  }
  return "It was false";
}
test(true);
test(false);
test(true) returns the string It was true, and test(false) returns the string It was false.

When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not.
Since it is true, the function returns It was true.

When we call test with a value of false,
myCondition is not true and the statement in the curly braces is not executed and the function returns It was false.


-----------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE EQUALITY OPERATOR 

There are many comparison operators in JavaScript. All of these operators return a boolean true or false value.

The most basic operator is the equality operator ==.
The equality operator compares two values and returns true if they're equivalent or false if they are not.
Note that equality is different from assignment (=), which assigns the value on the right of the operator to a variable on the left.

function equalityTest(myVal) {
  if (myVal == 10) {
     return "Equal";
  }
  return "Not Equal";
}

If myVal is equal to 10, the equality operator returns true,
so the code in the curly braces will execute, and the function will return Equal.
Otherwise, the function will return Not Equal.
In order for JavaScript to compare two different data types (for example, numbers and strings),
it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:

1   ==  1 // true
1   ==  2 // false
1   == '1' // true
"3" ==  3 // true

// Setup
function testEqual(val) {
  if (val == 12) { // val is equal to 12
    return "Equal";
  }
  return "Not Equal";
}

testEqual(10);


---------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE STRICT EQUALITY OPERATOR

Strict equality (===) is the counterpart to the equality operator (==).
However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.

If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.

Examples

3 ===  3 // true, number type
3 === '3' // false , 3 is a Number type and '3' is a String type.


// Setup
function testStrict(val) {
  if (val === 7) { // val is strictly equal to 7
    return "Equal";
  }
  return "Not Equal";
}

testStrict(10);

----------------------------------------------------------------------------------------------------------------------------





















-----------------------------------------------------------------------------------------------------------------------------

GOLF CODE

In the game of golf, each hole has a par, meaning,
the average number of strokes a golfer is expected to make in order to sink the ball in the hole to complete the play. 
Depending on how far above or below par your strokes are, there is a different nickname.

Your function will be passed par and strokes arguments. 
Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):

var names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
function golfScore(par, strokes) {
  // Only change code below this line
  if (strokes == 1) {
    return names[0]
  } else if ( strokes <= par - 2) {
    return names[1]
  } else if ( strokes == par - 1) {
    return names[2]
  } else if ( strokes == par) {
    return names[3]
  } else if ( strokes == par + 1) {
    return names[4]
  } else if ( strokes == par + 2) {
    return names[5]
  } else if ( strokes >= par + 3) {
    return names[6]
  }
  // Only change code above this line
}

golfScore(5, 4);

-------------------------------------------------------------------------------------------------------------------------------------------



