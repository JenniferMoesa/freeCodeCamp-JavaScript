COMMENT YOUR JAVASCRIPT CODE

// This is an in-line comment.

/* This is a
multi-line comment */

-------------------------------------------------------------------------------------------------------------------

DECLARE JAVASCRIPT VARIABLES
We tell JavaScript to create or declare a variable by putting the keyword var in front of it, like so:

var ourName;
creates a variable called ourName. In JavaScript we end statements with semicolons.
Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.

---------------------------------------------------------------------------------------------------------------------

STORING VALUES WITH THE ASSIGNMENT OPERATORPASSED
In JavaScript, you can store a value in a variable with the assignment operator (=).

myVariable = 5;
This assigns the Number value 5 to myVariable.

If there are any calculations to the right of the = operator,
those are performed before the value is assigned to the variable on the left of the operator.

var myVar;
myVar = 5;
First, this code creates a variable named myVar. Then, the code assigns 5 to myVar. 
Now, if myVar appears again in the code, the program will treat it as if it is 5.

----------------------------------------------------------------------------------------------------------------------

ASSIGNING THE VALUE OF ONE VARIABLE TO ANOTHER
After a value is assigned to a variable using the assignment operator,
you can assign the value of that variable to another variable using the assignment operator.

var myVar; //declares a myVar variable with no value
myVar = 5; //assigns the variable myVar with the value 5
var myNum; //a variable named myNum is declared with no value
myNum = myVar; //the contents of myVar (which is 5) is assigned to the variable myNum. Now, myNum also has the value of 5.

--------------------------------------------------------------------------------------------------------------------------

INITIALIZING VARIABLES WITH THE ASSIGNMENT OPERATOR
It is common to initialize a variable to an initial value in the same line as it is declared.

var myVar = 0;
Creates a new variable called myVar and assigns it an initial value of 0.

---------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING UNINITIALIZED VARIBLES

When JavaScript variables are declared, they have an initial value of undefined.
If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
If you concatenate a string with an undefined variable, you will get a literal string of undefined.

Initialize the three variables a, b, and c with 5, 10, and "I am a" respectively so that they will not be undefined.

var a = 5;
var b = 10;
var c = "I am a";
// Only change code above this line

a = a + 1; //6
b = b + 5; //15
c = c + " String!"; //I am a String!

----------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING CASE SENSITIVITY IN VARIABLES

In JavaScript all variables and function names are case sensitive. This means that capitalization matters.

MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing.
It is strongly recommended that for the sake of clarity, you do not use this language feature.

Best Practice

Write variable names in JavaScript in camelCase.
In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

Examples:

var someVariable;
var anotherVariableName;
var thisVariableNameIsSoLong;

------------------------------------------------------------------------------------------------------------------------------

ADD TWO NUMBERS WITH JAVASCRIPT

Number is a data type in JavaScript which represents numeric data.

Now let's try to add two numbers using JavaScript.

JavaScript uses the + symbol as an addition operator when placed between two numbers.

Example:

myVar = 5 + 10;
myVar now has the value 15.

var sum = 10 + 10; // sum equals 20

-------------------------------------------------------------------------------------------------------------------------------

SUBSTRACT ONE NUMBER FROM ANOTHER WITH JAVASCRIPT

We can also subtract one number from another.

JavaScript uses the - symbol for subtraction.

Example

myVar = 12 - 6;
myVar would have the value 6.


var difference = 45 - 33; // the difference is 12.

----------------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO NUMBERS WITH JAVASCRIPT

We can also multiply one number by another.

JavaScript uses the * symbol for multiplication of two numbers.

Example

myVar = 13 * 13;
myVar would have the value 169.

var product = 8 * 10; // product equals 80.

-----------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE NUMBER BY ANOTHER WITH JAVASCRIPT

We can also divide one number by another.

JavaScript uses the / symbol for division.

Example

myVar = 16 / 2; // myVar now has the value 8.

var quotient = 66 / 33; // quotient is equal to 2.


----------------------------------------------------------------------------------------------------------------------------------

INCREMENT (VERHOGEN) A NUMBER WITH JAVASCRIPT

You can easily increment or add one to a variable with the ++ operator.

i++;
is the equivalent of

i = i + 1;
Note: The entire line becomes i++;, eliminating the need for the equal sign.

var myVar = 87;
myVar ++; // myVar = myVar + 1;


---------------------------------------------------------------------------------------------------------------------------------

DECREMENT (VERMINDEREN) A NUMBER WITH JAVASCRIPT

You can easily decrement or decrease a variable by one with the -- operator.

i--;
is the equivalent of

i = i - 1;
Note: The entire line becomes i--;, eliminating the need for the equal sign.

var myVar = 11;
myVar --; // myVar = myVar - 1;


------------------------------------------------------------------------------------------------------------------------------

CREATE DECIMAL NUMBERS WITH JAVASCRIPT

We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.

Note: Not all real numbers can accurately be represented in floating point. This can lead to rounding errors

var myDecimal = 5.7;

-----------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO DECIMALS WITH JAVASCRIPT

In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.

Let's multiply two decimals together to get their product.

var product = 2.0 * 2.5; // product equals 5

------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE DECIMAL BY ANOTHER WITH JAVASCRIPT

Now let's divide one decimal by another.

var quotient = 4.4 / 2.0; // quotient equals to 2.2.

-------------------------------------------------------------------------------------------------------------------------------

FINDING A REMAINDER IN JAVASCRIPT

The remainder operator % gives the remainder of the division of two numbers.

Example

5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)

Usage
In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.

17 % 2 = 1 (17 is Odd)
48 % 2 = 0 (48 is Even)
Note: The remainder operator is sometimes incorrectly referred to as the modulus operator.
It is very similar to modulus, but does not work properly with negative numbers.

Example:
var remainder = 11 % 3;

----------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED ADDITION

In programming, it is common to use assignments to modify the contents of a variable.
Remember that everything to the right of the equals sign is evaluated first, so we can say:

myVar = myVar + 5; // add 5 to myVar.
Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.

One such operator is the += operator.

var myVar = 1;
myVar += 5;
console.log(myVar);
6 would be displayed in the console.

var a = 3;
var b = 17;
var c = 12;

// Only change code below this line
a += 12;
b += 9;
c += 7;

--------------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED SUBTRACTION  

Like the += operator, -= subtracts a number from a variable.

myVar = myVar - 5;
will subtract 5 from myVar. This can be rewritten as: myVar -= 5;

var a = 11;
var b = 9;
var c = 3;

// Only change code below this line
a -= 6;
b -= 15;
c -= 1;

----------------------------------------------------------------------------------------------------------------------------------------










ASSIGNMENT WITH A RETURNED VALUE
Call the processArg function with an argument of 7 and assign its return value to the variable processed.

var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

processed = processArg(7);

//processed has a value of 2
