COMMENT YOUR JAVASCRIPT CODE

// This is an in-line comment.

/* This is a
multi-line comment */

-------------------------------------------------------------------------------------------------------------------

DECLARE JAVASCRIPT VARIABLES
We tell JavaScript to create or declare a variable by putting the keyword var in front of it, like so:

var ourName;
creates a variable called ourName. In JavaScript we end statements with semicolons.
Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.

---------------------------------------------------------------------------------------------------------------------

STORING VALUES WITH THE ASSIGNMENT OPERATORPASSED
In JavaScript, you can store a value in a variable with the assignment operator (=).

myVariable = 5;
This assigns the Number value 5 to myVariable.

If there are any calculations to the right of the = operator,
those are performed before the value is assigned to the variable on the left of the operator.

var myVar;
myVar = 5;
First, this code creates a variable named myVar. Then, the code assigns 5 to myVar. 
Now, if myVar appears again in the code, the program will treat it as if it is 5.

----------------------------------------------------------------------------------------------------------------------

ASSIGNING THE VALUE OF ONE VARIABLE TO ANOTHER
After a value is assigned to a variable using the assignment operator,
you can assign the value of that variable to another variable using the assignment operator.

var myVar; //declares a myVar variable with no value
myVar = 5; //assigns the variable myVar with the value 5
var myNum; //a variable named myNum is declared with no value
myNum = myVar; //the contents of myVar (which is 5) is assigned to the variable myNum. Now, myNum also has the value of 5.

--------------------------------------------------------------------------------------------------------------------------

INITIALIZING VARIABLES WITH THE ASSIGNMENT OPERATOR
It is common to initialize a variable to an initial value in the same line as it is declared.

var myVar = 0;
Creates a new variable called myVar and assigns it an initial value of 0.

---------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING UNINITIALIZED VARIBLES

When JavaScript variables are declared, they have an initial value of undefined.
If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
If you concatenate a string with an undefined variable, you will get a literal string of undefined.

Initialize the three variables a, b, and c with 5, 10, and "I am a" respectively so that they will not be undefined.

var a = 5;
var b = 10;
var c = "I am a";
// Only change code above this line

a = a + 1; //6
b = b + 5; //15
c = c + " String!"; //I am a String!

----------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING CASE SENSITIVITY IN VARIABLES

In JavaScript all variables and function names are case sensitive. This means that capitalization matters.

MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing.
It is strongly recommended that for the sake of clarity, you do not use this language feature.

Best Practice

Write variable names in JavaScript in camelCase.
In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

Examples:

var someVariable;
var anotherVariableName;
var thisVariableNameIsSoLong;

------------------------------------------------------------------------------------------------------------------------------

ADD TWO NUMBERS WITH JAVASCRIPT

Number is a data type in JavaScript which represents numeric data.

Now let's try to add two numbers using JavaScript.

JavaScript uses the + symbol as an addition operator when placed between two numbers.

Example:

myVar = 5 + 10;
myVar now has the value 15.

var sum = 10 + 10; // sum equals 20

-------------------------------------------------------------------------------------------------------------------------------

SUBSTRACT ONE NUMBER FROM ANOTHER WITH JAVASCRIPT

We can also subtract one number from another.

JavaScript uses the - symbol for subtraction.

Example

myVar = 12 - 6;
myVar would have the value 6.


var difference = 45 - 33; // the difference is 12.

----------------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO NUMBERS WITH JAVASCRIPT

We can also multiply one number by another.

JavaScript uses the * symbol for multiplication of two numbers.

Example

myVar = 13 * 13;
myVar would have the value 169.

var product = 8 * 10; // product equals 80.

-----------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE NUMBER BY ANOTHER WITH JAVASCRIPT

We can also divide one number by another.

JavaScript uses the / symbol for division.

Example

myVar = 16 / 2; // myVar now has the value 8.

var quotient = 66 / 33; // quotient is equal to 2.


----------------------------------------------------------------------------------------------------------------------------------

INCREMENT (VERHOGEN) A NUMBER WITH JAVASCRIPT

You can easily increment or add one to a variable with the ++ operator.

i++;
is the equivalent of

i = i + 1;
Note: The entire line becomes i++;, eliminating the need for the equal sign.

var myVar = 87;
myVar ++; // myVar = myVar + 1;


---------------------------------------------------------------------------------------------------------------------------------

DECREMENT (VERMINDEREN) A NUMBER WITH JAVASCRIPT

You can easily decrement or decrease a variable by one with the -- operator.

i--;
is the equivalent of

i = i - 1;
Note: The entire line becomes i--;, eliminating the need for the equal sign.

var myVar = 11;
myVar --; // myVar = myVar - 1;


------------------------------------------------------------------------------------------------------------------------------

CREATE DECIMAL NUMBERS WITH JAVASCRIPT

We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.

Note: Not all real numbers can accurately be represented in floating point. This can lead to rounding errors

var myDecimal = 5.7;

-----------------------------------------------------------------------------------------------------------------------------

MULTIPLY TWO DECIMALS WITH JAVASCRIPT

In JavaScript, you can also perform calculations with decimal numbers, just like whole numbers.

Let's multiply two decimals together to get their product.

var product = 2.0 * 2.5; // product equals 5

------------------------------------------------------------------------------------------------------------------------------

DIVIDE ONE DECIMAL BY ANOTHER WITH JAVASCRIPT

Now let's divide one decimal by another.

var quotient = 4.4 / 2.0; // quotient equals to 2.2.

-------------------------------------------------------------------------------------------------------------------------------

FINDING A REMAINDER IN JAVASCRIPT

The remainder operator % gives the remainder of the division of two numbers.

Example

5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)

Usage
In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.

17 % 2 = 1 (17 is Odd)
48 % 2 = 0 (48 is Even)
Note: The remainder operator is sometimes incorrectly referred to as the modulus operator.
It is very similar to modulus, but does not work properly with negative numbers.

Example:
var remainder = 11 % 3;

----------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED ADDITION

In programming, it is common to use assignments to modify the contents of a variable.
Remember that everything to the right of the equals sign is evaluated first, so we can say:

myVar = myVar + 5; // add 5 to myVar.
Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.

One such operator is the += operator.

var myVar = 1;
myVar += 5;
console.log(myVar);
6 would be displayed in the console.

var a = 3;
var b = 17;
var c = 12;

// Only change code below this line
a += 12;
b += 9;
c += 7;

--------------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED SUBTRACTION  

Like the += operator, -= subtracts a number from a variable.

myVar = myVar - 5;
will subtract 5 from myVar. This can be rewritten as: myVar -= 5;

var a = 11;
var b = 9;
var c = 3;

// Only change code below this line
a -= 6;
b -= 15;
c -= 1;

----------------------------------------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED MULTIPLICATION

The *= operator multiplies a variable by a number.

myVar = myVar * 5;
will multiply myVar by 5. This can be rewritten as:

myVar *= 5;

var a = 5;
var b = 12;
var c = 4.6;

// Only change code below this line
a *= 5;
b *= 3;
c *= 10;

---------------------------------------------------------------------------------------------------------

COMPOUND ASSIGNMENT WITH AUGMENTED DIVISION

The /= operator divides a variable by another number.

myVar = myVar / 5;
Will divide myVar by 5. This can be rewritten as:

myVar /= 5;

var a = 48;
var b = 108;
var c = 33;

// Only change code below this line
a /= 12; // a = a /12;
b /= 4; // b = b / 4;
c /= 11; // c = c / 11;
---
---------------------------------------------------------------------------------------------------------------------------------------

DECLARE STRING VARIABLES

Previously we have used the code

var myName = "your name";
"your name" is called a string literal. It is a string because it is a series of zero or more characters enclosed in single or double quotes.

excercise:
Create two new string variables: myFirstName and myLastName and assign them the values of your first and last name, respectively.
var myFirstName = "Jennifer";
var myLastName = "Moesa";

----------------------------------------------------------------------------------------------------------------------------------------

ESCAPING LITERAL QUOTES IN STRINGS

When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: " or ' inside of your string?

In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

var sampleStr = "Alan said, \"Peter is learning JavaScript\".";

This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string.
So if you were to print this to the console, you would get:

Alan said, "Peter is learning JavaScript".

excercise:
Use backslashes to assign a string to the myStr variable so that if you were to print it to the console, you would see:

I am a "double quoted" string inside "double quotes".

var myStr = "I am a \"double quoted\" string inside \"double quotes\"."; // Change this line


-------------------------------------------------------------------------------------------------------------------------------------------

QUOTING STRINGS WITH SINGLE QUOTES

String values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote.
Unlike some other programming languages, single and double quotes work the same in JavaScript.

doubleQuoteStr = "This is a string"; 
singleQuoteStr = 'This is also a string';

The reason why you might want to use one type of quote over the other is if you want to use both in a string.
This might happen if you want to save a conversation in a string and have the conversation in quotes.
Another use for it would be saving an <a> tag with various attributes in quotes, all within a string.

conversation = 'Finn exclaims to Jake, "Algebraic!"';

However, this becomes a problem if you need to use the outermost quotes within it.
Remember, a string has the same kind of quote at the beginning and end.
But if you have that same quote somewhere in the middle, the string will stop early and throw an error.

goodStr = 'Jake asks Finn, "Hey, let\'s go on an adventure?"'; 
badStr = 'Finn responds, "Let's go!"';

Here badStr will throw an error.

In the goodStr above, you can use both quotes safely by using the backslash \ as an escape character.

Note: The backslash \ should not be confused with the forward slash /. They do not do the same thing.

excercise:

var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';

---------------------------------------------------------------------------------------------------------------------------------------------------

ESCAPE SEQUENCES IN STRINGS

Quotes are not the only characters that can be escaped inside a string. There are two reasons to use escaping characters:

To allow you to use characters you may not otherwise be able to type out, such as a carriage return.
To allow you to represent multiple quotes in a string without JavaScript misinterpreting what you mean.

We learned this in the previous challenge.

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	word boundary
\f	form feed
Note that the backslash itself must be escaped in order to display as a backslash.

Assign the following three lines of text into the single variable myStr using escape sequences.

FirstLine
    \SecondLine
ThirdLine
You will need to use escape sequences to insert special characters correctly.
You will also need to follow the spacing as it looks above, with no spaces between escape sequences or words.

Note: The indentation for SecondLine is achieved with the tab escape character, not spaces.

var myStr = "FirstLine\n\t\\SecondLine\nThirdLine"
------------------------------------------------------------------------------------------------------------------------------------------------------

CONCATENATING STRINGS WITH PLUS OPERATOR

In JavaScript, when the + operator is used with a String value, it is called the concatenation operator.
You can build a new string out of other strings by concatenating them together.

Example

'My name is Alan,' + ' I concatenate.'
Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example:

var ourStr = "I come first. " + "I come second.";
The string I come first. I come second. would be displayed in the console.

excercise:
Build myStr from the strings This is the start. and This is the end. using the + operator. Be sure to include a space between the two strings.

var myStr = "This is the start. " + "This is the end."; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

CONCATENATING STRINGS WITH THE PLUS EQUALS OPERATOR

We can also use the += operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.

Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

Example:

var ourStr = "I come first. ";
ourStr += "I come second.";
ourStr now has a value of the string I come first. I come second..

excercise:
Build myStr over several lines by concatenating these two strings: This is the first sentence. and This is the second sentence. using the += operator.
Use the += operator similar to how it is shown in the example and be sure to include a space between the two strings.
Start by assigning the first string to myStr, then add on the second string.

// Only change code below this line

var myStr = "This is the first sentence. ";
myStr += "This is the second sentence.";

-------------------------------------------------------------------------------------------------------------------------------------------------------

CONSTRUCTING STRINGS WITH VARIABLES

Sometimes you will need to build a string, Mad Libs style. By using the concatenation operator (+), you can insert one or more variables into a string you're building.

Example:

var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";
ourStr would have a value of the string Hello, our name is freeCodeCamp, how are you?.

excercise:
Set myName to a string equal to your name and build myStr with myName between the strings My name is and and I am well!

// Only change code below this line
var myName = "Jennifer";
var myStr = "My name is " + myName + "and I am well!";

------------------------------------------------------------------------------------------------------------------------------------------------------------

APPENDING VARIABLES TO STRINGS

Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.

Example:

var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;
ourStr would have the value freeCodeCamp is awesome!.

excercise:
Set someAdjective to a string of at least 3 characters and append it to myStr using the += operator.

// Change code below this line

var someAdjective = "amazing!";
var myStr = "Learning to code is ";
myStr += someAdjective;

---------------------------------------------------------------------------------------------------------------------------------------------------------

FIND THE LENGTH OF A STRING

You can find the length of a String value by writing .length after the string variable or string literal.

console.log("Alan Peter".length);
The value 10 would be displayed in the console.

For example, if we created a variable var firstName = "Ada", we could find out how long the string Ada is by using the firstName.length property.

excercise:
Use the .length property to count the number of characters in the lastName variable and assign it to lastNameLength.


// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

// Only change code below this line

lastNameLength = lastName.length;

------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE FIRST CHARACTER IN A STRING

Bracket notation is a way to get a character at a specific index within a string.

Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. They start at 0. This is referred to as Zero-based indexing.

For example, the character at index 0 in the word Charles is C. So if var firstName = "Charles", you can get the value of the first letter of the string by using firstName[0].

Example:

var firstName = "Charles";
var firstLetter = firstName[0];
firstLetter would have a value of the string C.

excercise:
Use bracket notation to find the first character in the lastName variable and assign it to firstLetterOfLastName.

Hint: Try looking at the example above if you get stuck.

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// Only change code below this line
firstLetterOfLastName = lastName[0]; // Change this line

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

UNDERSTAND STRING IMMUTABILITY

In JavaScript, String values are immutable, which means that they cannot be altered once created.

For example, the following code:

var myStr = "Bob";
myStr[0] = "J";

cannot change the value of myStr to Job, because the contents of myStr cannot be altered.
Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed.
The only way to change myStr would be to assign it with a new string, like this:

var myStr = "Bob";
myStr = "Job";

excercise:
Correct the assignment to myStr so it contains the string value of Hello World using the approach shown in the example above.

// Setup
var myStr = "Jello World";

// Only change code below this line
myStr = "Hello World"; // Change this line
// Only change code above this line

------------------------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE NTH CHARACTER IN A STRING

You can also use bracket notation to get the character at other positions within a string.

Remember that computers start counting at 0, so the first character is actually the zeroth character.

Example:

var firstName = "Ada";
var secondLetterOfFirstName = firstName[1];
secondLetterOfFirstName would have a value of the string d.

excercise:
Let's try to set thirdLetterOfLastName to equal the third letter of the lastName variable using bracket notation.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var thirdLetterOfLastName = lastName[2]; // Change this line

---------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE LAST CHARACTER IN A STRING

In order to get the last letter of a string, you can subtract one from the string's length.

For example, if var firstName = "Ada", you can get the value of the last letter of the string by using firstName[firstName.length - 1].

Example:

var firstName = "Ada";
var lastLetter = firstName[firstName.length - 1];
lastLetter would have a value of the string a.

excercise:
Use bracket notation to find the last character in the lastName variable.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var lastLetterOfLastName = lastName[lastName.length -1]; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

USE BRACKET NOTATION TO FIND THE NTH-TO-LAST CHARACTER IN A STRING

You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.

For example, you can get the value of the third-to-last letter of the var firstName = "Augusta" string by using firstName[firstName.length - 3]

Example:

var firstName = "Augusta";
var thirdToLastLetter = firstName[firstName.length - 3];
thirdToLastLetter would have a value of the string s.

excercise:
Use bracket notation to find the second-to-last character in the lastName string.

Hint: Try looking at the example above if you get stuck.

// Setup
var lastName = "Lovelace";

// Only change code below this line
var secondToLastLetterOfLastName = lastName[lastName.length - 2]; // Change this line

----------------------------------------------------------------------------------------------------------------------------------------------

WORD BLANKS

We will now use our knowledge of strings to build a "Mad Libs" style word game we're calling "Word Blanks".
You will create an (optionally humorous) "Fill in the Blanks" style sentence.

In a "Mad Libs" game, you are provided sentences with some missing words, like nouns, verbs, adjectives and adverbs.
You then fill in the missing pieces with words of your choice in a way that the completed sentence makes sense.

Consider this sentence - It was really ____, and we ____ ourselves ____.
This sentence has three missing pieces- an adjective, a verb and an adverb, and we can add words of our choice to complete it.
We can then assign the completed sentence to a variable as follows:

var sentence = "It was really " + "hot" + ", and we " + "laughed" + " ourselves " + "silly" + ".";

excercise:
In this challenge, we provide you with a noun, a verb, an adjective and an adverb.
You need to form a complete sentence using words of your choice, along with the words we provide.

You will need to use the string concatenation operator + to build a new string, using the provided variables: myNoun, myAdjective, myVerb, and myAdverb.
You will then assign the formed string to the wordBlanks variable. You should not change the words assigned to the variables.

You will also need to account for spaces in your string, so that the final sentence has spaces between all the words. The result should be a complete sentence.

var myNoun = "dog";
var myAdjective = "big";
var myVerb = "ran";
var myAdverb = "quickly";

// Only change code below this line
var wordBlanks = "The " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + "."; // Change this line
// Only change code above this line

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

STORE MULTIPLE VALUES IN ONE VARIABLE USING JAVASCRIPT ARRAYS

With JavaScript array variables, we can store several pieces of data in one place.

You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:

var sandwich = ["peanut butter", "jelly", "bread"]

excercise:
Modify the new array myArray so that it contains both a string and a number (in that order).

// Only change code below this line
var myArray = ["Jennifer" , 1];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

NEST ONE ARRAY WITHIN ANOTHER ARRAY

You can also nest arrays within other arrays, like below:

[["Bulls", 23], ["White Sox", 45]]
This is also called a multi-dimensional array.

excercise:
Create a nested array called myArray.

// Only change code below this line
var myArray = [["apples, 3"], ["pears", 3]];

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ACCES ARRAY DATA WITH INDEXES

We can access the data inside arrays using indexes.

Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array.
Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.


Example

var array = [50,60,70];
array[0];
var data = array[1];
array[0] is now 50, and data has the value 60.

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0].
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Create a variable called myData and set it to equal the first value of myArray using bracket notation.

var myArray = [50,60,70];

var myData = myArray[0];

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

MODIFY ARRAY DATA WITH INDEXES

Unlike strings, the entries of arrays are mutable and can be changed freely.

Example

var ourArray = [50,40,30];
ourArray[0] = 15;
ourArray now has the value [15, 40, 30].

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0].
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Modify the data stored at index 0 of myArray to a value of 45.

// Setup
var myArray = [18,64,99];
myArray[0] = 45;
// Only change code below this line

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ACCES MULTI-DIMENSIONAL ARRAYS WITH INDEXES

One way to think of a multi-dimensional array, is as an array of arrays.
When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array,
and each additional pair of brackets refers to the next level of entries inside.

Example

var arr = [
  [1,2,3],
  [4,5,6],
  [7,8,9],
  [[10,11,12], 13, 14]
];
arr[3];
arr[3][0];
arr[3][0][1];
arr[3] is [[10, 11, 12], 13, 14], arr[3][0] is [10, 11, 12], and arr[3][0][1] is 11.

Note: There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] is not allowed.
Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

excercise:
Using bracket notation select an element from myArray such that myData is equal to 8.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

MANIPULATE ARRAYS WITH PUSH()

An easy way to append data to the end of an array is via the push() function.

.push() takes one or more parameters and "pushes" them onto the end of the array.

Examples:

var arr1 = [1,2,3];
arr1.push(4);

var arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);

arr1 now has the value [1, 2, 3, 4] and arr2 has the value ["Stimpson", "J", "cat", ["happy", "joy"]].

excercise:
Push ["dog", 3] onto the end of the myArray variable.

// Setup
var myArray = [["John", 23], ["cat", 2]];
myArray.push(["dog", 3]);
// Only change code below this line

-------------------------------------------------------------------------------------------------------------------------------------------

MANIPULATE ARRAYS WITH POP()

Another way to change the data in an array is with the .pop() function.

.pop() is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable.
In other words, .pop() removes the last element from an array and returns that element.

Any type of entry can be popped off of an array - numbers, strings, even nested arrays.

var threeArr = [1, 4, 6];
var oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
The first console.log will display the value 6, and the second will display the value [1, 4].

excercise:
Use the .pop() function to remove the last item from myArray, assigning the popped off value to removedFromMyArray.

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line
var removedFromMyArray = myArray.pop();

-----------------------------------------------------------------------------------------------------------------------------------------

MANIPULATE ARRAYS WITH SHIFT()

pop() always removes the last element of an array. What if you want to remove the first?

That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.

Example:

var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
removedFromOurArray would have a value of the string Stimpson, and ourArray would have ["J", ["cat"]].

excercise:
Use the .shift() function to remove the first item from myArray, assigning the "shifted off" value to removedFromMyArray.

// Setup
var myArray = [["John", 23], ["dog", 3]];

// Only change code below this line
var removedFromMyArray = myArray.shift();

-------------------------------------------------------------------------------------------------------------------------------------------

MANIPULATE ARRAYS WITH UNSHIFT()

Not only can you shift elements off of the beginning of an array,
you can also unshift elements to the beginning of an array i.e. add elements in front of the array.

.unshift() works exactly like .push(), but instead of adding the element at the end of the array,
unshift() adds the element at the beginning of the array.

Example:

var ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");

After the shift, ourArray would have the value ["J", "cat"]. After the unshift, ourArray would have the value ["Happy", "J", "cat"].

excercise:
Add ["Paul",35] to the beginning of the myArray variable using unshift().

// Setup
var myArray = [["John", 23], ["dog", 3]];
myArray.shift();

// Only change code below this line

myArray.unshift(["Paul", 35]);

---------------------------------------------------------------------------------------------------------------------------------------

SHOPPING LIST

Create a shopping list in the variable myList. The list should be a multi-dimensional array containing several sub-arrays.

The first element in each sub-array should contain a string with the name of the item. 
The second element should be a number representing the quantity i.e.

["Chocolate Bar", 15]

excercise:
There should be at least 5 sub-arrays in the list.

var myList = [["berries", 15], ["pears", 10], ["bananas", 7], ["apples", 10], ["oatmeal", 2]];

-----------------------------------------------------------------------------------------------------------------------------------------

WRITE REUSABLE JAVASCRIPT WITH FUNCTIONS

In JavaScript, we can divide up our code into reusable parts called functions.

Here's an example of a function:

function functionName() {
  console.log("Hello World");
}

You can call or invoke this function by using its name followed by parentheses, like this: functionName();
Each time the function is called it will print out the message Hello World on the dev console.
All of the code between the curly braces will be executed every time the function is called.

excercise:
Create a function called reusableFunction which prints the string Hi World to the dev console.
Call the function.

function reusableFunction() {
  console.log("Hi World");
}
reusableFunction();

---------------------------------------------------------------------------------------------------------------------------------

PASSING VALUES TO FUNCTIONS WITH ARGUMENTS

Parameters are variables that act as placeholders for the values that are to be input to a function when it is called.
When a function is defined, it is typically defined along with one or more parameters.
The actual values that are input (or "passed") into a function when it is called are known as arguments.

Here is a function with two parameters, param1 and param2:

function testFun(param1, param2) {
  console.log(param1, param2);
}

Then we can call testFun like this: testFun("Hello", "World");. We have passed two string arguments, Hello and World.
Inside the function, param1 will equal the string Hello and param2 will equal the string World.
Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.

excercise:
Create a function called functionWithArgs that accepts two arguments and outputs their sum to the dev console.
Call the function with two numbers as arguments.

function functionWithArgs(a,b) {
  console.log(a+b);
}
functionWithArgs(5,10);

//console output: 15

------------------------------------------------------------------------------------------------------------------------------------------

GLOBAL SCOPE AND FUNCTIONS

In JavaScript, scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope.
This means, they can be seen everywhere in your JavaScript code.

Variables which are declared without the var keyword are automatically created in the global scope.
This can create unintended consequences elsewhere in your code or when running a function again.
You should always declare your variables with var.

excercise:
Using var, declare a global variable named myGlobal outside of any function. Initialize it with a value of 10.

Inside function fun1, assign 5 to oopsGlobal without using the var keyword.

// Declare the myGlobal variable below this line
var myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal Here
  oopsGlobal = 5;
}

// Only change code above this line

function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}

// running tests
// tests completed
// console output
myGlobal: 10 oopsGlobal: 5

-------------------------------------------------------------------------------------------------------------------------------------------

LOCAL SCOPE AND FUNCTIONS

Variables which are declared within a function, as well as the function parameters, have local scope.
That means they are only visible within that function.

Here is a function myTest with a local variable called loc.

function myTest() {
  var loc = "foo";
  console.log(loc);
}
myTest();
console.log(loc);
The myTest() function call will display the string foo in the console.
The console.log(loc) line will throw an error, as loc is not defined outside of the function.

excercise:
The editor has two console.logs to help you see what is happening.
Check the console as you code to see how it changes. Declare a local variable myVar inside myLocalScope and run the tests.

Note: The console will still display ReferenceError: myVar is not defined, but this will not cause the tests to fail

function myLocalScope() {

  // Only change code below this line
  var myVar = 10;
  console.log('inside myLocalScope', myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope
console.log('outside myLocalScope', myVar);

// console output
inside myLocalScope 10
ReferenceError: myVar is not defined

---------------------------------------------------------------------------------------------------------------------------------------

GLOBAL VS. LOCAL SCOPE IN FUNCTIONS

It is possible to have both local and global variables with the same name.
When you do this, the local variable takes precedence over the global variable.

In this example:

var someVar = "Hat";
function myFun() {
  var someVar = "Head";
  return someVar;
}

The function myFun will return the string Head because the local version of the variable is present.

excercise:
Add a local variable to myOutfit function to override the value of outerWear with the string sweater.

// Setup
var outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line
  var outerWear = "sweater";


  // Only change code above this line
  return outerWear;
}

myOutfit();

// console
// sweater
----------------------------------------------------------------------------------------------------------------------------------

RETURN A VALUE FROM A FUNCTION WITH RETURN

We can pass values into a function with arguments. You can use a return statement to send a value back out of a function.

Example

function plusThree(num) {
  return num + 3;
}
var answer = plusThree(5);
answer has the value 8.

plusThree takes an argument for num and returns a value equal to num + 3.

excercise:
Create a function timesFive that accepts one argument, multiplies it by 5, and returns the new value.

function timesFive(num) {
     return num * 5;
   } 
  var answer = timesFive(5);

  //console.log(timesFive(5));
  //25
  
  ------------------------------------------------------------------------------------------------------------------

UNDERSTANDING UNDEFINED VALUE RETURNED FROM A FUNCTION

A function can include the return statement but it does not have to.
In the case that the function doesn't have a return statement,
when you call it, the function processes the inner code but the returned value is undefined.

Example

var sum = 0;
function addSum(num) {
  sum = sum + num;
}
addSum(3);

addSum is a function without a return statement.
The function will change the global sum variable but the returned value of the function is undefined.

excercise:
Create a function addFive without any arguments.
This function adds 5 to the sum variable, but its returned value is undefined.

//console.log(addThree(5)); undefined
//console.log(addFive(5)); undefined

----------------------------------------------------------------------------------------------------------------------------

ASSIGNMENT WITH A RETURNED VALUE
Call the processArg function with an argument of 7 and assign its return value to the variable processed.

var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

processed = processArg(7);

//processed has a value of 2

----------------------------------------------------------------------------------------------------------------------------

STAND IN LINE

In Computer Science a queue is an abstract Data Structure where items are kept in order.
New items can be added at the back of the queue and old items are taken off from the front of the queue.

FIRST
function nextInLine(arr, item) {
  // Your code here
  arr.push(item);
  return item; 
}

var testArr = [1,2,3,4,5];

console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));

AFTER
function nextInLine(arr, item) {
  // Your code here
  arr.push(item);
  return arr.shift(); 
}

var testArr = [1,2,3,4,5];

console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6));
console.log("After: " + JSON.stringify(testArr));

----------------------------------------------------------------------------------------------------------------------------

UNDERSTANDING BOOLEAN VALUES

Another data type is the Boolean. Booleans may only be one of two values: true or false.
They are basically little on-off switches, where true is on and false is off. These two states are mutually exclusive.

Note: Boolean values are never written with quotes. The strings "true" and "false" are not Boolean
and have no special meaning in JavaScript.

function welcomeToBooleans() {
  return true; 
}

-----------------------------------------------------------------------------------------------------------------------

USE CONDITIONAL LOGIC WITH IF STATEMENTS

If statements are used to make decisions in code.
The keyword if tells JavaScript to execute the code in the curly braces under certain conditions, defined in the parentheses.
These conditions are known as Boolean conditions and they may only be true or false.

When the condition evaluates to true, the program executes the statement inside the curly braces.
When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.

Pseudocode

if (condition is true) {
  statement is executed
}

Example

function test (myCondition) {
  if (myCondition) {
     return "It was true";
  }
  return "It was false";
}
test(true);
test(false);
test(true) returns the string It was true, and test(false) returns the string It was false.

When test is called with a value of true, the if statement evaluates myCondition to see if it is true or not.
Since it is true, the function returns It was true.

When we call test with a value of false,
myCondition is not true and the statement in the curly braces is not executed and the function returns It was false.


-----------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE EQUALITY OPERATOR 

There are many comparison operators in JavaScript. All of these operators return a boolean true or false value.

The most basic operator is the equality operator ==.
The equality operator compares two values and returns true if they're equivalent or false if they are not.
Note that equality is different from assignment (=), which assigns the value on the right of the operator to a variable on the left.

function equalityTest(myVal) {
  if (myVal == 10) {
     return "Equal";
  }
  return "Not Equal";
}

If myVal is equal to 10, the equality operator returns true,
so the code in the curly braces will execute, and the function will return Equal.
Otherwise, the function will return Not Equal.
In order for JavaScript to compare two different data types (for example, numbers and strings),
it must convert one type to another. This is known as Type Coercion. Once it does, however, it can compare terms as follows:

1   ==  1 // true
1   ==  2 // false
1   == '1' // true
"3" ==  3 // true

// Setup
function testEqual(val) {
  if (val == 12) { // val is equal to 12
    return "Equal";
  }
  return "Not Equal";
}

testEqual(10);


---------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE STRICT EQUALITY OPERATOR

Strict equality (===) is the counterpart to the equality operator (==).
However, unlike the equality operator, which attempts to convert both values being compared to a common type, the strict equality operator does not perform a type conversion.

If the values being compared have different types, they are considered unequal, and the strict equality operator will return false.

Examples

3 ===  3 // true, number type
3 === '3' // false , 3 is a Number type and '3' is a String type.


// Setup
function testStrict(val) {
  if (val === 7) { // val is strictly equal to 7
    return "Equal";
  }
  return "Not Equal";
}

testStrict(10);

----------------------------------------------------------------------------------------------------------------------------

PRACTICE COMPARING DIFFERENT VALUES

In the last two challenges, we learned about the equality operator (==) and the strict equality operator (===).
Let's do a quick review and practice using these operators some more.

If the values being compared are not of the same type, the equality operator will perform a type conversion, and then evaluate the values.
However, the strict equality operator will compare both the data type and value as-is, without converting one type to the other.

Examples

3 == '3' returns true because JavaScript performs type conversion from string to number.
3 === '3' returns false because the types are different and type conversion is not performed.

Note: In JavaScript, you can determine the type of a variable or a value with the typeof operator, as follows:

typeof 3
typeof '3'
typeof 3 returns the string number, and typeof '3' returns the string string.

excercise:
The compareEquality function in the editor compares two values using the equality operator.
Modify the function so that it returns the string Equal only when the values are strictly equal.

// Setup
function compareEquality(a, b) {
  if (a === b) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

compareEquality(10, "10"); //Not Equal

----------------------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE INEQUALITY OPERATOR

The inequality operator (!=) is the opposite of the equality operator.
It means not equal and returns false where equality would return true and vice versa.
Like the equality operator, the inequality operator will convert data types of values while comparing.

Examples

1 !=  2 // true
1 != "1" // false
1 != '1' // false
1 != true //false
0 != false // false

excercise:
Add the inequality operator != in the if statement so that the function will return the string Not Equal when val is not equivalent to 99

// Setup
function testNotEqual(val) {
  if (val != 99) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

console.log(testNotEqual(10));// Not Equal

------------------------------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE STRICT INEQUALITY OPERATOR

The strict inequality operator (!==) is the logical opposite of the strict equality operator.
It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa.
The strict inequality operator will not convert data types.

Examples

3 !==  3 // false
3 !== '3' // true
4 !==  3 // true

excercise:
Add the strict inequality operator to the if statement so the function will return the string Not Equal when val is not strictly equal to 17

// Setup
function testStrictNotEqual(val) {
  if (val !== 17) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

console.log(testStrictNotEqual(10)); // Not Equal

-----------------------------------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE GREATER THAN OPERATOR

The greater than operator (>) compares the values of two numbers.
If the number to the left is greater than the number to the right, it returns true. Otherwise, it returns false.

Like the equality operator, the greater than operator will convert data types of values while comparing.

Examples

5   >  3 // true
7   > '3' // true
2   >  3 // false
'1' >  9 // false

excercise:
Add the greater than operator to the indicated lines so that the return statements make sense.

function testGreaterThan(val) {
  if (val > 100) {  // Change this line
    return "Over 100";
  }

  if (val > 10) {  // Change this line
    return "Over 10";
  }

  return "10 or Under";
}

console.log(testGreaterThan(10)); // 10 or under

-----------------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE GREATER THAN OR EQUAL TO OPERATOR

The greater than or equal to operator (>=) compares the values of two numbers.
If the number to the left is greater than or equal to the number to the right, it returns true. Otherwise, it returns false.

Like the equality operator, the greater than or equal to operator will convert data types while comparing.

Examples

6   >=  6 // true
7   >= '3' // true
2   >=  3 // false
'7' >=  9 // false

excercise:
Add the greater than or equal to operator to the indicated lines so that the return statements make sense.

function testGreaterOrEqual(val) {
  if (val >= 20) {  // Change this line
    return "20 or Over";
  }

  if (val >= 10) {  // Change this line
    return "10 or Over";
  }

  return "Less than 10";
}

console.log(testGreaterOrEqual(10)); // 10 or over

-------------------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE LESS THAN OPERATOR

The less than operator (<) compares the values of two numbers.
If the number to the left is less than the number to the right, it returns true.
Otherwise, it returns false. Like the equality operator, the less than operator converts data types while comparing.

Examples

2   < 5 // true
'3' < 7 // true
5   < 5 // false
3   < 2 // false
'8' < 4 // false

excercise:
Add the less than operator to the indicated lines so that the return statements make sense.

function testLessThan(val) {
  if (val < 25) {  // Change this line
    return "Under 25";
  }

  if (val < 55) {  // Change this line
    return "Under 55";
  }

  return "55 or Over";
}

console.log(testLessThan(10)); // Under 25

---------------------------------------------------------------------------------------------------------------------------------

COMPARISON WITH THE LESS THAN OR EQUAL TO OPERATOR

The less than or equal to operator (<=) compares the values of two numbers.
If the number to the left is less than or equal to the number to the right, it returns true.
If the number on the left is greater than the number on the right, it returns false. Like the equality operator, the less than or equal to operator converts data types.

Examples

4   <= 5 // true
'7' <= 7 // true
5   <= 5 // true
3   <= 2 // false
'8' <= 4 // false

excercise:
Add the less than or equal to operator to the indicated lines so that the return statements make sense.

function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }

  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }

  return "More Than 24";
}

console.log(testLessOrEqual(10)); // Smaller Than or Equal to 12

--------------------------------------------------------------------------------------------------------------------------------------

COMPARISONS WITH THE LOGICAL AND OPERATOR

Sometimes you will need to test more than one thing at a time.
The logical and operator (&&) returns true if and only if the operands to the left and right of it are true.

The same effect could be achieved by nesting an if statement inside another if:

if (num > 5) {
  if (num < 10) {
    return "Yes";
  }
}
return "No";
will only return Yes if num is greater than 5 and less than 10. The same logic can be written as:

if (num > 5 && num < 10) {
  return "Yes";
}
return "No";

excercise:
Replace the two if statements with one statement, using the && operator,
which will return the string Yes if val is less than or equal to 50 and greater than or equal to 25.
Otherwise, will return the string No.

function testLogicalAnd(val) {
  // Only change code below this line

  if (val <= 50 && val >= 25) {
      return "Yes";
  }

  // Only change code above this line
  return "No";
}

console.log(testLogicalAnd(10)); // No

------------------------------------------------------------------------------------------------------------------------------

COMPARISONS WITH THE LOGICAL OR OPERATOR

The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.

The logical or operator is composed of two pipe symbols: (||). This can typically be found between your Backspace and Enter keys.

The pattern below should look familiar from prior waypoints:

if (num > 10) {
  return "No";
}
if (num < 5) {
  return "No";
}
return "Yes";
will return Yes only if num is between 5 and 10 (5 and 10 included). The same logic can be written as:

if (num > 10 || num < 5) {
  return "No";
}
return "Yes";

excercise:
Combine the two if statements into one statement which returns the string Outside if val is not between 10 and 20, inclusive.
Otherwise, return the string Inside.

function testLogicalOr(val) {
  // Only change code below this line

  if (val < 10 ||val > 20) {
    return "Outside";
  }

  // Only change code above this line
  return "Inside";
}

console.log(testLogicalOr(15)); // Inside

---------------------------------------------------------------------------------------------------------------------------------------

INTRODUCING ELSE STATEMENTS

When a condition for an if statement is true, the block of code following it is executed.
What about when that condition is false? Normally nothing would happen.
With an else statement, an alternate block of code can be executed.

if (num > 10) {
  return "Bigger than 10";
} else {
  return "10 or Less";
}

excercise:
Combine the if statements into a single if/else statement.

function testElse(val) {
  var result = "";
  // Only change code below this line

  if (val > 5) {
    result = "Bigger than 5";
  } else {
    result = "5 or Smaller";
  }

  // Only change code above this line
  return result;
}

console.log(testElse(4)); // 5 or Smaller

---------------------------------------------------------------------------------------------------

INTRODUCING ELSE IF STATEMENTS

If you have multiple conditions that need to be addressed, you can chain if statements together with else if statements.

if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}

excercise:
Convert the logic to use else if statements.

function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else {
    return "Between 5 and 10";
  }
}

console.log(testElseIf(7)); // Between 5 and 10

--------------------------------------------------------------------------------------------------------

LOGICAL ORDER IN IF ELSE STATEMENTS

Order is important in if, else if statements.

The function is executed from top to bottom so you will want to be careful of what statement comes first.

Take these two functions as an example.

Here's the first:

function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}

And the second just switches the order of the statements:

function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}

While these two functions look nearly identical if we pass a number to both we get different outputs.

foo(0) // Less than on
bar(0) // Less than two

excercise:
Change the order of logic in the function so that it will return the correct statements in all cases.

function orderMyLogic(val) {
  if (val < 5) {
    return "Less than 5";
  } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}

console.log(orderMyLogic(7));

------------------------------------------------------------------------------------------------------------------

CHAINING IF ELSE STATEMENTS

if/else statements can be chained together for complex logic. Here is pseudocode of multiple chained if / else if statements:

if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}

excercise:
Write chained if/else if statements to fulfill the following conditions:

num < 5 - return Tiny
num < 10 - return Small
num < 15 - return Medium
num < 20 - return Large
num >= 20 - return Huge

function testSize(num) {
  // Only change code below this line
  if (num < 5) {
      return "Tiny";
  } else if (num < 10) {
      return "Small";
  } else if (num < 15) {
      return "Medium";
  } else if (num < 20) {
      return "Large";    
  } else {
    return "Huge"
  }
  // Only change code above this line
}

console.log(testSize(7)); // Small


-----------------------------------------------------------------------------------------------------------------------------

GOLF CODE

In the game of golf, each hole has a par, meaning,
the average number of strokes a golfer is expected to make in order to sink the ball in the hole to complete the play. 
Depending on how far above or below par your strokes are, there is a different nickname.

Your function will be passed par and strokes arguments. 
Return the correct string according to this table which lists the strokes in order of priority; top (highest) to bottom (lowest):

var names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
function golfScore(par, strokes) {
  // Only change code below this line
  if (strokes == 1) {
    return names[0]
  } else if ( strokes <= par - 2) {
    return names[1]
  } else if ( strokes == par - 1) {
    return names[2]
  } else if ( strokes == par) {
    return names[3]
  } else if ( strokes == par + 1) {
    return names[4]
  } else if ( strokes == par + 2) {
    return names[5]
  } else if ( strokes >= par + 3) {
    return names[6]
  }
  // Only change code above this line
}

golfScore(5, 4);

-------------------------------------------------------------------------------------------------------------------------------------------

SELECTING FROM MANY OPTIONS WITH SWITCH STATEMENTS

If you have many options to choose from, use a switch statement.
A switch statement tests a value and can have many case statements which define various possible values.
Statements are executed from the first matched case value until a break is encountered.

Here is an example of a switch statement:

switch(lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
case values are tested with strict equality (===).
The break tells JavaScript to stop executing statements.
If the break is omitted, the next statement will be executed.

excercise:
Write a switch statement which tests val and sets answer for the following conditions:
1 - alpha
2 - beta
3 - gamma
4 - delta

function caseInSwitch(val) {
  var answer = "";
  // Only change code below this line
  switch(val) {
    case 1:
    answer = "alpha";
    break;
  case 2:
     answer = "beta";
    break;
  case 3:
     answer = "gamma";
    break;
  case 4:
     answer = "delta";
    break;
  }
  // Only change code above this line
  return answer;
}

console.log(caseInSwitch(1)); // alpha

-----------------------------------------------------------------------------------------------------

ADDING A DEFAULT OPTION IN SWITCH STATEMENTS

In a switch statement you may not be able to specify all possible values as case statements.
Instead, you can add the default statement which will be executed if no matching case statements are found.
Think of it like the final else statement in an if/else chain.

A default statement should be the last case.

switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}

excercise:

Write a switch statement to set answer for the following conditions:
a - apple
b - bird
c - cat
default - stuff

function switchOfStuff(val) {
  var answer = "";
  // Only change code below this line
  switch (val) {
  case "a":
    answer = "apple";
    break;
  case "b":
    answer = "bird";
    break;
  case "c":
    answer = "cat";
    break;
  default:
    answer = "stuff";
    break;
}

  // Only change code above this line
  return answer;
}

console.log(switchOfStuff(1)); // stuff

-------------------------------------------------------------------------------------------------

MULTIPLE IDENTICAL OPTIONS IN SWITCH STATEMENTS

If the break statement is omitted from a switch statement's case, the following case statement(s) are executed until a break is encountered.
If you have multiple inputs with the same output, you can represent them in a switch statement like this:

var result = "";
switch(val) {
  case 1:
  case 2:
  case 3:
    result = "1, 2, or 3";
    break;
  case 4:
    result = "4 alone";
}
Cases for 1, 2, and 3 will all produce the same result.

excercise:
Write a switch statement to set answer for the following ranges:
1-3 - Low
4-6 - Mid
7-9 - High

Note: You will need to have a case statement for each number in the range.

function sequentialSizes(val) {
  var answer = "";
 
  switch(val) {
  case 1:
  case 2:
  case 3:
    answer = "Low";
    break;
  case 4:
  case 5:
  case 6:
    answer = "Mid";
    break;
  case 7:
  case 8:
  case 9:
    answer = "High";
    break;
}
  return answer;
}

console.log(sequentialSizes(7)); // High

------------------------------------------------------------------------------------------

REPLACING IF ELSE CHAINS WITH SWITCH

If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. The following:

if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:

switch(val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}

excercise:
Change the chained if/else if statements into a switch statement.

function chainToSwitch(val) {
  var answer = "";
  // Only change code below this line

  switch(val) {
    case "bob":
    answer = "Marley";
    break
    case 42:
    answer = "The Answer";
    break;
    case 1:
    answer = "There is no #1";
    break;
    case 99:
    answer = "Missed me by this much!";
    break;
    case 7:
    answer = "Ate Nine";
    break;
  }

  // Only change code above this line
  return answer;
}

console.log(chainToSwitch(1)); // There is no #1

-----------------------------------------------------------------------------------------













